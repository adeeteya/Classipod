name: Build and Deploy Releases

on:
  workflow_dispatch:
    inputs:
      version_number:
        description: 'Release Version Number'
        required: true
        type: string

env:
  FLUTTER_CHANNEL: "stable"
  RUBY_VERSION: "3.2.2"

jobs:
  build_web:
    name: Build Web
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Flutter tasks
        uses: subosito/flutter-action@v2
        with:
            flutter-version-file: 'pubspec.yaml'
            channel: ${{ env.FLUTTER_CHANNEL }}

      - uses: bluefireteam/flutter-gh-pages@v9
        with:
          baseHref: /Classipod/

  build_windows:
    name: Build Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create a GitHub Release
        shell: cmd
        run: |
          gh release create "${{ inputs.version_number }}" --title "Version ${{ inputs.version_number }}" --generate-notes
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Install yq
        run: choco install yq

      - name: Run Flutter tasks
        uses: subosito/flutter-action@v2
        with:
          flutter-version-file: 'pubspec.yaml'
          channel: ${{ env.FLUTTER_CHANNEL }}

      - name: Build Windows Release
        run: flutter build windows --release

      - name: Install Inno Setup
        run: | 
          powershell curl -o build\installer.exe http://files.jrsoftware.org/is/6/innosetup-6.4.2.exe
          powershell git clone https://github.com/DomGries/InnoDependencyInstaller.git  build\inno-depend
          powershell build\installer.exe /verysilent /allusers /dir=build\iscc

      - name: Run Inno Setup
        run:  .\build\iscc\iscc.exe .\scripts\windows-setup.iss /DMyAppVersion=${{ inputs.version_number }}

      - name: Upload Windows Release Artifact to GitHub Release
        shell: cmd
        run: |
          gh release upload ${{ inputs.version_number }} D:\a\Classipod\Classipod\ClassiPod-Windows.exe
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

  build_android:
    name: Build Android
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          working-directory: 'android'

      - name: Run Flutter tasks
        uses: subosito/flutter-action@v2.16.0
        with:
          flutter-version-file: 'pubspec.yaml'
          channel: ${{ env.FLUTTER_CHANNEL }}
          cache: true

      - name: Create google_service_account.json
        run: |
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_BASE64 }}" | base64 --decode > google_service_account.json

      - name: Create key.jks
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_FILE_BASE64 }}" | base64 --decode > android/key.jks

      - name: Create key.properties
        run: |
          cat <<EOF > android/key.properties
          storePassword=${{ secrets.ANDROID_KEY_STORE_PASSWORD }}
          keyPassword=${{ secrets.ANDROID_KEY_STORE_PASSWORD }}
          keyAlias=release
          storeFile=../key.jks
          EOF
        env:
          ANDROID_KEY_STORE_PASSWORD: ${{ secrets.ANDROID_KEY_STORE_PASSWORD }}

      - name: Release To Play Store
        uses: maierj/fastlane-action@v3.1.0
        with:
          lane: 'release_play_store'
          subdirectory: android
          options: '{ "version_number": "${{ inputs.version_number }}" }'
        env:
          APP_PACKAGE_NAME: ${{ secrets.APP_PACKAGE_NAME }}

      - name: Build APK
        uses: maierj/fastlane-action@v3.1.0
        with:
          lane: 'build_apk'
          subdirectory: android
          options: '{ "version_number": "${{ inputs.version_number }}" }'
      
      - name: Upload APK Artifact to GitHub Release
        run:  gh release upload ${{ inputs.version_number }} build/app/outputs/flutter-apk/Classipod-Android.apk